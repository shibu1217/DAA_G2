//code with memoization in dp 0/1 knapsack

#include <iostream>

#include<cstring>


using namespace std;


int knapsack(int wt[],int val[],int W,int n)
{    

    int static t[102][1002];
  
  memset(t,-1,sizeof(t));
  
  
    if(n==0||W==0)
     
 return 0;
  
  if(t[n][W]!=-1)
  
     return t[n][W];
    
if(wt[n-1]<=W)
  
    return t[n][W]= max(val[n-1]+knapsack(wt,val,W-wt[n-1],n-1),knapsack(wt,val,W,n-1));
    else if(wt[n-1]>W)
 
   return t[n][W]=knapsack(wt,val,W,n-1);

}


int main()
{
 
   int wt[]={1,4,4,8};
 
   int val[]={1,8,5,7};
   
 int W=7;
   
int  n=sizeof wt/sizeof wt[0];
  
  int result=knapsack(wt,val,W,n);
  
 (result==0)?cout<<"bag is empty"<<endl:cout<<"bag is not empty"<<" "<<result<<endl;
   

    return 0;

}
